// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class NotEnoughToken extends ethereum.Event {
  get params(): NotEnoughToken__Params {
    return new NotEnoughToken__Params(this);
  }
}

export class NotEnoughToken__Params {
  _event: NotEnoughToken;

  constructor(event: NotEnoughToken) {
    this._event = event;
  }

  get roomId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get voter(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class VoteCast extends ethereum.Event {
  get params(): VoteCast__Params {
    return new VoteCast__Params(this);
  }
}

export class VoteCast__Params {
  _event: VoteCast;

  constructor(event: VoteCast) {
    this._event = event;
  }

  get roomId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get voter(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class VotingRoomFinalized extends ethereum.Event {
  get params(): VotingRoomFinalized__Params {
    return new VotingRoomFinalized__Params(this);
  }
}

export class VotingRoomFinalized__Params {
  _event: VotingRoomFinalized;

  constructor(event: VotingRoomFinalized) {
    this._event = event;
  }

  get roomId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get publicKey(): Bytes {
    return this._event.parameters[1].value.toBytes();
  }

  get passed(): boolean {
    return this._event.parameters[2].value.toBoolean();
  }

  get voteType(): i32 {
    return this._event.parameters[3].value.toI32();
  }
}

export class VotingRoomStarted extends ethereum.Event {
  get params(): VotingRoomStarted__Params {
    return new VotingRoomStarted__Params(this);
  }
}

export class VotingRoomStarted__Params {
  _event: VotingRoomStarted;

  constructor(event: VotingRoomStarted) {
    this._event = event;
  }

  get roomId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get publicKey(): Bytes {
    return this._event.parameters[1].value.toBytes();
  }
}

export class VotingContract__getCommunityVotingResultValue0Struct extends ethereum.Tuple {
  get startBlock(): BigInt {
    return this[0].toBigInt();
  }

  get endAt(): BigInt {
    return this[1].toBigInt();
  }

  get voteType(): i32 {
    return this[2].toI32();
  }

  get finalized(): boolean {
    return this[3].toBoolean();
  }

  get community(): Bytes {
    return this[4].toBytes();
  }

  get totalVotesFor(): BigInt {
    return this[5].toBigInt();
  }

  get totalVotesAgainst(): BigInt {
    return this[6].toBigInt();
  }

  get roomNumber(): BigInt {
    return this[7].toBigInt();
  }

  get voters(): Array<Address> {
    return this[8].toAddressArray();
  }
}

export class VotingContract__votingRoomsResult {
  value0: BigInt;
  value1: BigInt;
  value2: i32;
  value3: boolean;
  value4: Bytes;
  value5: BigInt;
  value6: BigInt;
  value7: BigInt;

  constructor(
    value0: BigInt,
    value1: BigInt,
    value2: i32,
    value3: boolean,
    value4: Bytes,
    value5: BigInt,
    value6: BigInt,
    value7: BigInt
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
    this.value6 = value6;
    this.value7 = value7;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set(
      "value2",
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(this.value2))
    );
    map.set("value3", ethereum.Value.fromBoolean(this.value3));
    map.set("value4", ethereum.Value.fromBytes(this.value4));
    map.set("value5", ethereum.Value.fromUnsignedBigInt(this.value5));
    map.set("value6", ethereum.Value.fromUnsignedBigInt(this.value6));
    map.set("value7", ethereum.Value.fromUnsignedBigInt(this.value7));
    return map;
  }
}

export class VotingContract extends ethereum.SmartContract {
  static bind(address: Address): VotingContract {
    return new VotingContract("VotingContract", address);
  }

  activeVotingRooms(param0: BigInt): BigInt {
    let result = super.call(
      "activeVotingRooms",
      "activeVotingRooms(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return result[0].toBigInt();
  }

  try_activeVotingRooms(param0: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "activeVotingRooms",
      "activeVotingRooms(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  directory(): Address {
    let result = super.call("directory", "directory():(address)", []);

    return result[0].toAddress();
  }

  try_directory(): ethereum.CallResult<Address> {
    let result = super.tryCall("directory", "directory():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getActiveVotingRooms(): Array<BigInt> {
    let result = super.call(
      "getActiveVotingRooms",
      "getActiveVotingRooms():(uint256[])",
      []
    );

    return result[0].toBigIntArray();
  }

  try_getActiveVotingRooms(): ethereum.CallResult<Array<BigInt>> {
    let result = super.tryCall(
      "getActiveVotingRooms",
      "getActiveVotingRooms():(uint256[])",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigIntArray());
  }

  getCommunityVoting(
    publicKey: Bytes
  ): VotingContract__getCommunityVotingResultValue0Struct {
    let result = super.call(
      "getCommunityVoting",
      "getCommunityVoting(bytes):((uint256,uint256,uint8,bool,bytes,uint256,uint256,uint256,address[]))",
      [ethereum.Value.fromBytes(publicKey)]
    );

    return result[0].toTuple() as VotingContract__getCommunityVotingResultValue0Struct;
  }

  try_getCommunityVoting(
    publicKey: Bytes
  ): ethereum.CallResult<VotingContract__getCommunityVotingResultValue0Struct> {
    let result = super.tryCall(
      "getCommunityVoting",
      "getCommunityVoting(bytes):((uint256,uint256,uint8,bool,bytes,uint256,uint256,uint256,address[]))",
      [ethereum.Value.fromBytes(publicKey)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      value[0].toTuple() as VotingContract__getCommunityVotingResultValue0Struct
    );
  }

  listRoomVoters(roomId: BigInt): Array<Address> {
    let result = super.call(
      "listRoomVoters",
      "listRoomVoters(uint256):(address[])",
      [ethereum.Value.fromUnsignedBigInt(roomId)]
    );

    return result[0].toAddressArray();
  }

  try_listRoomVoters(roomId: BigInt): ethereum.CallResult<Array<Address>> {
    let result = super.tryCall(
      "listRoomVoters",
      "listRoomVoters(uint256):(address[])",
      [ethereum.Value.fromUnsignedBigInt(roomId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddressArray());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  token(): Address {
    let result = super.call("token", "token():(address)", []);

    return result[0].toAddress();
  }

  try_token(): ethereum.CallResult<Address> {
    let result = super.tryCall("token", "token():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  votingRooms(param0: BigInt): VotingContract__votingRoomsResult {
    let result = super.call(
      "votingRooms",
      "votingRooms(uint256):(uint256,uint256,uint8,bool,bytes,uint256,uint256,uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return new VotingContract__votingRoomsResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toI32(),
      result[3].toBoolean(),
      result[4].toBytes(),
      result[5].toBigInt(),
      result[6].toBigInt(),
      result[7].toBigInt()
    );
  }

  try_votingRooms(
    param0: BigInt
  ): ethereum.CallResult<VotingContract__votingRoomsResult> {
    let result = super.tryCall(
      "votingRooms",
      "votingRooms(uint256):(uint256,uint256,uint8,bool,bytes,uint256,uint256,uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new VotingContract__votingRoomsResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toI32(),
        value[3].toBoolean(),
        value[4].toBytes(),
        value[5].toBigInt(),
        value[6].toBigInt(),
        value[7].toBigInt()
      )
    );
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _address(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class CastVotesCall extends ethereum.Call {
  get inputs(): CastVotesCall__Inputs {
    return new CastVotesCall__Inputs(this);
  }

  get outputs(): CastVotesCall__Outputs {
    return new CastVotesCall__Outputs(this);
  }
}

export class CastVotesCall__Inputs {
  _call: CastVotesCall;

  constructor(call: CastVotesCall) {
    this._call = call;
  }

  get votes(): Array<CastVotesCallVotesStruct> {
    return this._call.inputValues[0].value.toTupleArray<
      CastVotesCallVotesStruct
    >();
  }
}

export class CastVotesCall__Outputs {
  _call: CastVotesCall;

  constructor(call: CastVotesCall) {
    this._call = call;
  }
}

export class CastVotesCallVotesStruct extends ethereum.Tuple {
  get voter(): Address {
    return this[0].toAddress();
  }

  get roomIdAndType(): BigInt {
    return this[1].toBigInt();
  }

  get sntAmount(): BigInt {
    return this[2].toBigInt();
  }

  get r(): Bytes {
    return this[3].toBytes();
  }

  get vs(): Bytes {
    return this[4].toBytes();
  }
}

export class FinalizeVotingRoomCall extends ethereum.Call {
  get inputs(): FinalizeVotingRoomCall__Inputs {
    return new FinalizeVotingRoomCall__Inputs(this);
  }

  get outputs(): FinalizeVotingRoomCall__Outputs {
    return new FinalizeVotingRoomCall__Outputs(this);
  }
}

export class FinalizeVotingRoomCall__Inputs {
  _call: FinalizeVotingRoomCall;

  constructor(call: FinalizeVotingRoomCall) {
    this._call = call;
  }

  get roomId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class FinalizeVotingRoomCall__Outputs {
  _call: FinalizeVotingRoomCall;

  constructor(call: FinalizeVotingRoomCall) {
    this._call = call;
  }
}

export class InitializeVotingRoomCall extends ethereum.Call {
  get inputs(): InitializeVotingRoomCall__Inputs {
    return new InitializeVotingRoomCall__Inputs(this);
  }

  get outputs(): InitializeVotingRoomCall__Outputs {
    return new InitializeVotingRoomCall__Outputs(this);
  }
}

export class InitializeVotingRoomCall__Inputs {
  _call: InitializeVotingRoomCall;

  constructor(call: InitializeVotingRoomCall) {
    this._call = call;
  }

  get voteType(): i32 {
    return this._call.inputValues[0].value.toI32();
  }

  get publicKey(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }

  get voteAmount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class InitializeVotingRoomCall__Outputs {
  _call: InitializeVotingRoomCall;

  constructor(call: InitializeVotingRoomCall) {
    this._call = call;
  }
}

export class SetDirectoryCall extends ethereum.Call {
  get inputs(): SetDirectoryCall__Inputs {
    return new SetDirectoryCall__Inputs(this);
  }

  get outputs(): SetDirectoryCall__Outputs {
    return new SetDirectoryCall__Outputs(this);
  }
}

export class SetDirectoryCall__Inputs {
  _call: SetDirectoryCall;

  constructor(call: SetDirectoryCall) {
    this._call = call;
  }

  get _address(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetDirectoryCall__Outputs {
  _call: SetDirectoryCall;

  constructor(call: SetDirectoryCall) {
    this._call = call;
  }
}
